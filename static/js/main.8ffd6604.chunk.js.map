{"version":3,"sources":["pages/singlecolor.jsx","pages/home.jsx","index.js"],"names":["Singlecolor","rgb","weight","index","hex","useState","alert","setAlert","background","join","showcopybtn","setShowCopyBtn","hexValue","className","style","backgroundColor","onMouseEnter","onMouseLeave","onClick","navigator","clipboard","writeText","Home","color","setColor","error","setEreror","Values","all","list","setList","onSubmit","targetEvent","preventDefault","colors","console","log","type","value","name","id","onChange","defEvent","target","placeholder","map","singleColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNA+CeA,EA5CK,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACtC,EAA0BC,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAaP,EAAIQ,KAAK,KAC5B,EAAsCJ,oBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACMC,EAAQ,WAAOR,GA2BrB,OACI,sBAAKS,UAAS,+BAA0BV,GAAS,IAAM,aAAcW,MAAO,CAACC,gBAAe,cACpFP,EADoF,MACpEQ,aA3BR,WAChBL,GAAe,IA0BoCM,aAvBnC,WAChBN,GAAe,GACfJ,GAAS,IAoBT,UAGI,oBAAGM,UAAU,YAAb,UAA0BX,EAA1B,OACA,mBAAGW,UAAU,YAAb,SAA0BD,IAC1BN,GAAS,mBAAGO,UAAU,aAAb,sCAEV,wBAAQA,UAAS,UAAKH,EAAa,UAAW,WAA7B,KAA4CQ,QAxBhD,WAChBC,UAAUC,UAAUC,UAAUT,GAC9BL,GAAS,IAsBN,2B,gBClCI,SAASe,IACpB,MAA0BjB,mBAAS,IAAnC,mBAAOkB,EAAP,KAAcC,EAAd,KACA,EAA2BnB,oBAAS,GAApC,mBAAOoB,EAAP,KAAcC,EAAd,KACA,EAAwBrB,mBAAS,IAAIsB,IAAO,WAAWC,IAAI,KAA3D,mBAAOC,EAAP,KAAaC,EAAb,KAkBA,OACI,mCACA,sBAAKjB,UAAU,YAAf,UACI,0BAASA,UAAU,UAAnB,UACQ,iDACA,uBAAMkB,SApBL,SAACC,GAClBA,EAAYC,iBAEZ,IACI,IAAIC,EAAS,IAAIP,IAAOJ,GAAOK,IAAI,IACnCE,EAAQI,GACRC,QAAQC,IAAIP,GACd,MAAOJ,GACLC,GAAU,GACVS,QAAQC,IAAIX,KAWA,UACI,uBAAOY,KAAK,OAAOC,MAAOf,EAC1BgB,KAAK,GAAGC,GAAG,GAAGC,SAAU,SAACC,GAAD,OACxBlB,EAASkB,EAASC,OAAOL,QACzBM,YAAY,UAAU/B,UAAS,UAAKY,EAAO,sBAAwB,cAGnE,wBAAQZ,UAAU,MAClBwB,KAAK,SADL,4BAMhB,yBAASxB,UAAU,SAAnB,SACKgB,EAAKgB,KAAI,SAACC,EAAa3C,GAGpB,OAFAgC,QAAQC,IAAIP,GAEL,cAAC,EAAD,2BAA6BiB,GAA7B,IAEP3C,MAASA,EAAOC,IAAK0C,EAAY1C,MAFRD,aC9CzC4C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC3B,EAAD,MAEF4B,SAASC,eAAe,W","file":"static/js/main.8ffd6604.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react'\r\n\r\n\r\nconst Singlecolor = ({rgb, weight, index, hex}) => {\r\n    const [alert, setAlert] = useState(false);\r\n    const background = rgb.join(',');\r\n    const [showcopybtn, setShowCopyBtn] = useState(false)\r\n    const hexValue = `#${hex}`\r\n\r\n    const handleAlert = () =>{\r\n        setShowCopyBtn(true)\r\n    };\r\n\r\n    const handleLeave = () =>{\r\n        setShowCopyBtn(false)\r\n        setAlert(false)\r\n    };\r\n\r\n    const handleClick = () =>{\r\n        navigator.clipboard.writeText(hexValue);\r\n        setAlert(true)\r\n    }\r\n     \r\n    /*useEffect(() => {\r\n      const timer = setTimeout(() => {\r\n          setShowCopyBtn(false)\r\n      }, 3000);\r\n        return () => {\r\n            clearTimeout(timer)\r\n        }\r\n    }, [showcopybtn])*/\r\n\r\n\r\n    \r\n    return (\r\n        <div className={`singlecolorContainer ${index >= 10 && 'textColor'}`}style={{backgroundColor\r\n        :`rgb(${background})`}} onMouseEnter={handleAlert} onMouseLeave={handleLeave} >\r\n            \r\n            <p className='paraClass'>{weight}%</p>\r\n            <p className='htmlValue'>{hexValue}</p>\r\n           {alert && <p className='copiedText'>Text copied to clipboard</p>}\r\n\r\n           <button className={`${showcopybtn? 'copyBTN': 'copyBTN2'} `} onClick={handleClick}>Copy Text</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Singlecolor;","import React, { useState } from 'react';\r\nimport \"./home.css\";\r\nimport \"./responsive.css\";\r\nimport Singlecolor from \"./singlecolor\";\r\n\r\nimport Values from \"values.js\";\r\n\r\n\r\nexport default function Home() {\r\n    const [color, setColor] = useState('');\r\n    const [error, setEreror] = useState(false);\r\n    const [list, setList] = useState(new Values('#f15025').all(10));\r\n\r\n\r\nconst handleSubmit = (targetEvent) =>{\r\n    targetEvent.preventDefault();\r\n    \r\n    try {\r\n        let colors = new Values(color).all(10);\r\n        setList(colors)\r\n        console.log(list)\r\n    } catch (error) {\r\n        setEreror(true)\r\n        console.log(error)\r\n        \r\n    }\r\n\r\n}\r\n\r\n    return (\r\n        <>\r\n        <div className='container'>\r\n            <section className='wrapper'>\r\n                    <h3>Color Generator</h3>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <input type=\"text\" value={color} \r\n                        name=\"\" id=\"\" onChange={(defEvent)=>\r\n                        setColor(defEvent.target.value)}\r\n                        placeholder='#f15025' className={`${error? 'inputBox errorInput' : 'inputBox'}`} />\r\n\r\n                        \r\n                        <button className='btn'\r\n                        type='submit'>Generate</button>\r\n                    </form>\r\n\r\n            </section>\r\n            \r\n        <section className='colors'>\r\n            {list.map((singleColor, index)=>{\r\n                console.log(list)\r\n                \r\n                return <Singlecolor key={index} {...singleColor}\r\n        \r\n                index = {index} hex={singleColor.hex}/>\r\n\r\n            })}\r\n\r\n        </section>\r\n\r\n          </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Home from \"./pages/home\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}